# Generated by Django 5.1.1 on 2024-09-29 10:28

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Crop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "crop_name",
                    models.CharField(
                        help_text="Enter the name of the crop.", max_length=50
                    ),
                ),
                (
                    "crop_type",
                    models.CharField(
                        help_text="Specify the type of crop.", max_length=50
                    ),
                ),
                (
                    "growing_season",
                    models.CharField(
                        choices=[
                            ("Spring", "Spring"),
                            ("Summer", "Summer"),
                            ("Autumn", "Autumn"),
                            ("Winter", "Winter"),
                        ],
                        help_text="Define the growing season of the crop.",
                        max_length=50,
                    ),
                ),
                (
                    "ideal_temperature_min",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the minimum ideal temperature for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(-50),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "ideal_temperature_max",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the maximum ideal temperature for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(-50),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "ideal_humidity_min",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the minimum ideal humidity for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "ideal_humidity_max",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the maximum ideal humidity for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "ideal_rainfall_min",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the minimum ideal rainfall for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                (
                    "ideal_rainfall_max",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Enter the maximum ideal rainfall for the crop.",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name": "Crop",
                "verbose_name_plural": "Crops",
            },
        ),
        migrations.CreateModel(
            name="CropIdealConditions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ideal_temperature_min", models.FloatField()),
                ("ideal_temperature_max", models.FloatField()),
                ("ideal_rainfall_min", models.FloatField()),
                ("ideal_rainfall_max", models.FloatField()),
                ("ideal_humidity_min", models.FloatField()),
                ("ideal_humidity_max", models.FloatField()),
                (
                    "crop",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ideal_conditions",
                        to="farm_management.crop",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Farm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("location", models.CharField(max_length=255)),
                ("total_area", models.FloatField(default=0)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "ordering": ["user__username"],
            },
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("recommendation_text", models.TextField()),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.farm",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CropYieldPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                ("predicted_yield", models.FloatField()),
                ("confidence", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crop_yield_predictions",
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["-year", "-created_at"],
                "unique_together": {("farm", "crop", "year")},
            },
        ),
        migrations.CreateModel(
            name="CropRotationPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                ("confidence", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "predicted_crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crop_rotation_predictions",
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["-year", "-created_at"],
                "unique_together": {("farm", "year")},
            },
        ),
        migrations.CreateModel(
            name="CropRotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confidence", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("year", models.IntegerField()),
                (
                    "predicted_crop",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="predicted_rotations",
                        to="farm_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crop_rotations",
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["-year", "-created_at"],
                "unique_together": {("farm", "year")},
            },
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("temperature", models.FloatField(default=0.0)),
                ("feels_like", models.FloatField(default=0.0)),
                ("temp_min", models.FloatField(default=0.0)),
                ("temp_max", models.FloatField(default=0.0)),
                ("pressure", models.IntegerField(default=1013)),
                ("humidity", models.IntegerField(default=50)),
                ("visibility", models.IntegerField(default=10000)),
                ("wind_speed", models.FloatField(default=0.0)),
                ("wind_direction", models.IntegerField(default=0)),
                ("wind_gust", models.FloatField(blank=True, null=True)),
                ("cloudiness", models.IntegerField(default=0)),
                ("rainfall", models.FloatField(default=0.0)),
                ("weather_main", models.CharField(default="Clear", max_length=100)),
                (
                    "weather_description",
                    models.CharField(default="Clear sky", max_length=200),
                ),
                ("weather_icon", models.CharField(default="01d", max_length=10)),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "unique_together": {("farm", "date")},
            },
        ),
        migrations.CreateModel(
            name="WeatherForecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("temperature_max", models.FloatField()),
                ("temperature_min", models.FloatField()),
                ("rainfall", models.FloatField()),
                ("humidity", models.FloatField()),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_forecasts",
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["date"],
                "unique_together": {("farm", "date")},
            },
        ),
        migrations.CreateModel(
            name="WeatherImpact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("impact_description", models.TextField()),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="farm_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weather_impacts",
                        to="farm_management.farm",
                    ),
                ),
            ],
            options={
                "ordering": ["date"],
                "unique_together": {("farm", "crop", "date")},
            },
        ),
    ]
