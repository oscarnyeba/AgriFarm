# Generated by Django 5.1.1 on 2024-09-19 14:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_name', models.CharField(help_text='Enter the name of the crop.', max_length=50)),
                ('crop_type', models.CharField(help_text='Specify the type of crop.', max_length=50)),
                ('growing_season', models.CharField(choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Autumn', 'Autumn'), ('Winter', 'Winter')], help_text='Define the growing season of the crop.', max_length=50)),
                ('ideal_temperature_min', models.DecimalField(decimal_places=2, default=0, help_text='Enter the minimum ideal temperature for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(50)])),
                ('ideal_temperature_max', models.DecimalField(decimal_places=2, default=0, help_text='Enter the maximum ideal temperature for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(50)])),
                ('ideal_humidity_min', models.DecimalField(decimal_places=2, default=0, help_text='Enter the minimum ideal humidity for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ideal_humidity_max', models.DecimalField(decimal_places=2, default=0, help_text='Enter the maximum ideal humidity for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ideal_rainfall_min', models.DecimalField(decimal_places=2, default=0, help_text='Enter the minimum ideal rainfall for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('ideal_rainfall_max', models.DecimalField(decimal_places=2, default=0, help_text='Enter the maximum ideal rainfall for the crop.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('preferred_soil_texture', models.CharField(choices=[('Sandy', 'Sandy'), ('Loamy', 'Loamy'), ('Clay', 'Clay'), ('Silty', 'Silty'), ('Peaty', 'Peaty'), ('Chalky', 'Chalky'), ('Any', 'Any')], default='Any', help_text='Select the preferred soil texture for the crop.', max_length=50)),
            ],
            options={
                'verbose_name': 'Crop',
                'verbose_name_plural': 'Crops',
            },
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=100, unique=True)),
                ('location', models.CharField(max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=8, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('total_area', models.DecimalField(decimal_places=2, max_digits=10)),
                ('User', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Farm',
                'verbose_name_plural': 'Farms',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.IntegerField(choices=[(1, 'Farmer'), (2, 'Expert')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('asked_on', models.DateTimeField(auto_now_add=True)),
                ('asked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('answered_on', models.DateTimeField(auto_now_add=True)),
                ('answered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to=settings.AUTH_USER_MODEL)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='answer', to='farm_management.question')),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('recommendation_text', models.TextField()),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm_management.crop')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm_management.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Soil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ph_level', models.FloatField()),
                ('nitrogen_level', models.FloatField()),
                ('phosphorus_level', models.FloatField()),
                ('potassium_level', models.FloatField()),
                ('texture', models.CharField(choices=[('Sandy', 'Sandy'), ('Loamy', 'Loamy'), ('Clay', 'Clay'), ('Silty', 'Silty'), ('Peaty', 'Peaty'), ('Chalky', 'Chalky')], default='Loamy', max_length=50)),
                ('farm', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='soil', to='farm_management.farm')),
            ],
            options={
                'db_table': 'soil_table',
                'ordering': ['ph_level'],
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('temperature', models.FloatField()),
                ('humidity', models.FloatField()),
                ('rainfall', models.FloatField()),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm_management.farm')),
            ],
            options={
                'verbose_name': 'Weather Data',
                'verbose_name_plural': 'Weather Data',
                'unique_together': {('farm', 'date')},
            },
        ),
    ]
